doctype html
html
	head
		if locals.title
			title= title
		else
			title New Sails App

		// Viewport mobile tag for sensible mobile support
		meta(name="viewport",content="width=device-width, initial-scale=1, maximum-scale=1")

		//-
			Stylesheets and Preprocessors
			==============================

			You can always bring in CSS files manually with `<link>` tags, or asynchronously
			using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
			of Sails' conventional asset pipeline (boilerplate Gruntfile).

			By default, stylesheets from your `assets/styles` folder are included
			here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
			are supported. In production, your styles will be minified and concatenated into
			a single file.

			To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
			For example, here are a few things you could do:

					+ Change the order of your CSS files
					+ Import stylesheets from other directories
					+ Use a different or additional preprocessor, like SASS, SCSS or Stylus

		// STYLES
		link(rel="stylesheet", href="/styles/css/bootstrap.min.css")
		link(rel="stylesheet", href="/styles/css/custom.css")
		link(rel="stylesheet", href="/styles/css/dataTables.bootstrap.css")
		link(rel="stylesheet", href="/styles/css/dataTables.responsive.css")
		link(rel="stylesheet", href="/styles/css/font-awesome.min.css")
		link(rel="stylesheet", href="/styles/css/metisMenu.min.css")
		link(rel="stylesheet", href="/styles/css/morris.css")
		link(rel="stylesheet", href="/styles/css/sb-admin-2.css")
		// STYLES END

		block styles

	body
		nav.navbar.navbar-default.navbar-static-top
			.container
				.navbar-header
					button.navbar-toggle.collapsed(type='button', data-toggle='collapse', data-target='#navbar', aria-expanded='false', aria-controls='navbar')
						span.sr-only Toggle navigation
						span.icon-bar
						span.icon-bar
						span.icon-bar
					a.navbar-brand(href='#') My Deal
				#navbar.navbar-collapse.collapse
					ul.nav.navbar-nav
						li.active
							a(href='#') Home
						li
							a(href='#about') About
						li
							a(href='#contact') Contact
						li.dropdown
							a.dropdown-toggle(href='#', data-toggle='dropdown', role='button', aria-haspopup='true', aria-expanded='false')
								| Dropdown 
								span.caret
							ul.dropdown-menu
								li
									a(href='#') Action
								li
									a(href='#') Another action
								li
									a(href='#') Something else here
								li.divider(role='separator')
								li.dropdown-header Nav header
								li
									a(href='#') Separated link
								li
									a(href='#') One more separated link
					a.btn.btn-default.navbar-btn(href='/signup') Sign up
					a.btn.btn-default.btn-success(href='/login') Sign in
				// /.nav-collapse
		block body

		//-
			Client-side Templates
			========================

			HTML templates are important prerequisites of modern, rich client applications.
			To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
			that you load these templates client-side.

			By default, your Gruntfile is configured to automatically load and precompile
			client-side JST templates in your `assets/templates` folder, then
			include them here automatically (between TEMPLATES and TEMPLATES END).

			To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
			For example, here are a few things you could do:

					+ Import templates from other directories
					+ Use a different template engine (handlebars, jade, dust, etc.)
					+ Internationalize your client-side templates using a server-side
						stringfile before they're served.

		// TEMPLATES
		
		// TEMPLATES END

		//-
			Client-side Javascript
			========================

			You can always bring in JS files manually with `script` tags, or asynchronously
			on the client using a solution like AMD (RequireJS).  Or, if you like, you can
			take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

			By default, files in your `assets/js` folder are included here
			automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
			CoffeeScript (.coffee) are supported. In production, your scripts will be minified
			and concatenated into a single file.

			To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
			For example, here are a few things you could do:

					+ Change the order of your scripts
					+ Import scripts from other directories
					+ Use a different preprocessor, like TypeScript

		// SCRIPTS
		script(src="/js/dependencies/sails.io.js")
		script(src="/js/aajquery.min.js")
		script(src="/js/ajquery.dataTables.min.js")
		script(src="/js/bootstrap.min.js")
		script(src="/js/dataTables.bootstrap.min.js")
		script(src="/js/dataTables.responsive.js")
		script(src="/js/jquery.validate.js")
		script(src="/js/jquerycustomValidate.js")
		script(src="/js/metisMenu.min.js")
		script(src="/js/morris.min.js")
		script(src="/js/raphael.min.js")
		script(src="/js/sb-admin-2.js")
		// SCRIPTS END

